import urllib
from google.appengine.ext import webapp
from google.appengine.ext import blobstore
from google.appengine.api import memcache
from google.appengine.ext import db
from google.appengine.ext.webapp import blobstore_handlers
from models import BlobImage
from models import ImageTheme
import functions
import logging
from models import ImageThemeCache

class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self, resource):
        resource = str(urllib.unquote(resource))
        blob_info = blobstore.BlobInfo.get(resource)
        self.send_blob(blob_info)


class ServeThemed(blobstore_handlers.BlobstoreDownloadHandler):
    def saveToCache(self, theme_key, image_key, image_data):
        logging.debug(str(theme_key))
        logging.debug(str(image_key))
        itc = ImageThemeCache(theme_key = theme_key,
                              image_key = image_key,
                              image_data = image_data)
        itc.put()
        memcache.set((str(theme_key)+str(image_key)),image_data)

    def serveJPEG(self,img_data):
        self.response.headers['Content-Type'] = 'image/jpeg'
        self.response.out.write(img_data) 

    def getImageFromCache(self, image_key,theme_key):
        key =  str(image_key) + str(theme_key)
        cachedImage = memcache.get(key)
        if cachedImage:
            logging.debug('served from memcache')
            return cachedImage
 
        q = ImageThemeCache.all().filter('theme_key = ', theme_key).filter('image_key = ', image_key).get()
        return q.image_data if q else None

    def ServeImage(self, image_key,theme_label):
 
        ## try from cache
        theme = ImageTheme.all().filter('label = ', theme_label).get()
        
        if theme:
            theme_key = str(theme.key())
            themed = self.getImageFromCache(image_key,theme_key)
            if themed:
               memcache.set((image_key+theme_key),themed)
               logging.debug('served from cache')
               self.serveJPEG(themed)
               return

        try:
            blob_image = BlobImage.get(image_key)
        except db.BadKeyError:
            self.response.out.write('no blob found for image_id ' + image_key)
            return
   
        if not blob_image:
           self.response.out.write('no blob found for image_id ' + image_key)
           return

        if theme_label == 'actual':
           self.send_blob(blob_image.blob)
           return

        if not theme:
           self.response.out.write('no theme entry for ' + theme_label)
           return
   
        width = theme.width
        height = theme.height
        blob_key = blob_image.blob.key()

        themed = functions.rescale(str(blob_key),width,height)
        self.saveToCache(str(theme.key()),image_key, themed)
        logging.debug('remade from scrath')
        self.serveJPEG(themed)
        

    def get(self):
        image_id = self.request.get('image_id')
        theme_label = self.request.get('theme') if self.request.get('theme') else 'default'

        if not image_id:
           self.response.out.write('image_id is required')
           return

        self.ServeImage(image_id,theme_label)
           
